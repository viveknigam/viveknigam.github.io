mod FDA-BASIC is 
    inc NAT .
    inc META-LEVEL . 

**** subraction on natural numbers
op monus : Nat Nat -> Nat .
eq monus(n0:Nat,n1:Nat) = if (n0:Nat < n1:Nat) then 0 else sd(n0:Nat,n1:Nat) fi .

sorts Fact TFact Conf WConf .  *** TFact is a timed fact

**** Conf is a multiset of TFact with identity none
subsort TFact < Conf .
op none : -> Conf [ctor] .
op __ : Conf Conf -> Conf [ctor assoc comm id: none] .
**** A Plan is a tree of Configurations.

sort Plan .
***subsort WConf < Plan .
op {_} : Conf -> Plan [ctor] .
op noPlan : -> Plan [ctor] .
op _+_  : Plan Plan -> Plan [ctor assoc id: noPlan] .

sort Ev .
ops noEv unexpected normal repeat-urine : -> Ev . 

*** We define the extended configuration that carries a whole trace.
*** In order to work with reflection, we also declare an error operator.
*** Not using this yet. 
sort XConf . 
op |_,_| : Conf Qid -> XConf [ctor] . 
op error : -> Plan .

*** Sort for the names of subjects
sort Name . 
op name : Nat -> Name [ctor] .

**** IdC is a counter formalizing the (exists id), for Id numbers -- a new id(n) each time
sort Id .
op  blank : -> Id .
op id : Nat -> Id .
op idC : -> Fact .  --- the IdC time is the counter

**** lbC is a counter formalizing the (exists B), for labels -- a new lb(n) each time
sort Label .
op none : -> Label .
op lb : Nat -> Label .
op lbC : -> Fact .  --- the IdC time is the counter

**** trC is a counter formalizing the (exists Num), for fda transaction numbers -- a new tr(n) each time
sort TransNum .
op tr : Nat -> TransNum .
op trC : -> Fact .  --- the IdC time is the counter

**** Facts of a configuration:
*** - time denotes the time of a configuration;
*** - per contains the name of a person;
*** - schedule denotes that one should schedule the visits of a subject;
*** - consent contains the fact that a subject signed or not a consent form;
*** - box contains the id and a label. Intuitively, this fact is used in blinded-trials, 
***        where the subject does not know whether his taking placebo or drug
*** - vital, nefro are used to denote test results or the obligation of performing a test.
*** - dose denote whether a subject received or not the doses of drug/placebo
*** - detected is used to store the time when a problem has been detected with a 
***                a subject;
*** - scrTests are used to mark whether the screening tests have been performed 
***                  or not.

op time : -> Fact [ctor] .
op per : Name -> Fact [ctor] . 
op schedule : Id -> Fact [ctor] .
op consent : Name Bool -> Fact [ctor] .
op sub : Id Name -> Fact [ctor] .
op box : Id Label  -> Fact [ctor] .
ops vital nefro blood : Nat Id Bool -> Fact [ctor] .
op dose : Nat Id Label -> Fact [ctor] .
op detected : Id TransNum -> Fact [ctor] .
op baseTests : Id Bool -> Fact [ctor] .
sort scrTestRes .
ops no ok bad : -> scrTestRes .
op scrTests : Id scrTestRes -> Fact[ctor] .

*** timestamping facts 
op _@_ : Fact Nat -> TFact [ctor] .

*** There are three possible status for subjects.
sort Status .
ops ok hold stop : -> Status [ctor] . 
op status : Id Status -> Fact [ctor] .

*** There are three visit status.
sort VisitStatus .
ops no yes done : -> VisitStatus [ctor] .
op visit : Nat Id VisitStatus -> Fact [ctor] .

*** Urine tests have three possible results.
sort UrineResult .
ops none ok high bad : -> UrineResult [ctor] .
op urine : Nat Id UrineResult UrineResult -> Fact [ctor] .

*** When a fact 
sort FDAStatus .
ops no notify safety : -> FDAStatus .
op fda : Id FDAStatus TransNum -> Fact [ctor] .

sort Parameters .  subsort Parameters < TFact .

*** These operators are used to specify when a configuration 
*** is critical (critical), a plan is a goal plan (goal), that is, all its end configurations
*** are goal configurations,  and when a configuration is a a goal 
*** configuration (goalC).  

op critical : Plan -> Bool .
op criticalC : Conf -> Bool .
op goal : Plan -> Bool .
op goalC : Conf -> Bool .

vars G G1 G2 : Fact .
vars F F1 F2 : TFact . 
var S : Conf . 
var P : Plan . 
var C : Conf .
vars N N1 N2 : Nat .

*** Some auxiliary operators

op member : TFact Conf -> Bool .
eq member(F, F S) = true .

op remove : TFact Conf -> Conf .
eq remove(F, F C) = C .

op timeOf : TFact -> Nat .
eq timeOf(G @ N) = N .

*** This operator is used to initialize a scenario. 

op start : -> TFact  .

*** One needs to provide the name of the candidate and the current 
*** labels for identifiers and box labels.
op startScr : Name Nat Nat -> TFact  .

*** These equations are used to check whether a plan contains only goal configurations.

ceq goal({S} + P) = goal(P)
if (goalC (S) == true) .

eq goal({S}) = goalC(S) . 

eq goal(noPlan) = true .

*** These equations are used to check whether one of the configurations reached is 
*** critical

ceq critical({S} + P) = true 
if criticalC(S) .

**** Machinery for computing the canonical form of configurations

sort TList .
vars L L1 L2 : TList .
op nil : -> TList [ctor] .
op _:_ : TFact TList -> TList [ctor] .

op length : TList -> Nat .
eq length (nil) = 0 .
eq length (F : L) = length(L) + 1 .

op _++_ : TList TList -> TList .
eq nil ++ L = L .
eq (F : L1) ++ L2 = F : (L1 ++ L2) .

op take_from_ : Nat TList -> TList .
eq take 0 from L = nil .
eq take N from (F : L) = F : (take (monus(N,1)) from L) . 

op throw_from_ : Nat TList -> TList .
eq throw 0 from L = L .
eq throw N from nil = nil .
eq throw N from (F : L) = throw (monus(N,1)) from L .

op mergesort : TList -> TList .
op merge : TList TList -> TList .
eq mergesort(nil) = nil .
eq mergesort(F : nil) = F : nil .
ceq mergesort(L)  = merge(mergesort(take (length(L) quo 2) from L),
          mergesort(throw (length(L) quo 2) from L))  
	if length(L) > 1 .

eq merge(L, nil) = L .
eq merge(nil, L) = L .
ceq merge(F1 : L1, F2 : L2) = F1 : merge(L1, F2 : L2) if timeOf(F1) <= timeOf(F2) .
ceq merge(F1 : L1, F2 : L2) = F2 : merge(F1 : L1, L2) if timeOf(F1) > timeOf(F2) .

*** red (mergesort ( time @ 2 : time @ 3 : time @ 1 : time @ 8 : time @ 7 : nil )) .

*** Converts a configuration to its truncated time configuration
*** We are using Max + 1 to represent infinity. 
op truncate : TList Nat Nat -> TList .
var Acc : Nat .
var Max : Nat .

eq truncate(nil, Max, Acc) = nil .
eq truncate(G @ N : nil, Max, Acc) = G @ Acc : nil .
ceq truncate (G1 @ N1 : G2 @ N2 : L, Max, Acc) =  G1 @ Acc : truncate(G2 @ N2 : L,  Max, Acc + (monus(N2,N1)))
    if monus(N2, N1) <= Max .
ceq truncate (G1 @ N1 : G2 @ N2 : L, Max, Acc) =  G1 @ Acc : truncate(G2 @ N2 : L,  Max, Acc + Max + 1)
    if monus(N2, N1) > Max .

*** red ( truncate(time @ 2 : time @ 5 : time @ 10 : time @ 12 : nil, 3, 0)) .  
op toList : Conf -> TList .
op toConf : TList -> Conf .

eq toList (none) = nil .
eq toList (F C) = F : toList(C) .

eq toConf (nil) = none .
eq toConf (F : L) = F (toConf(L)) .

*** red ( toConf(time @ 2 : time @ 5 : time @ 10 : time @ 12 : nil)) .  
*** red ( toList(toConf(time @ 2 : time @ 5 : time @ 10 : time @ 12 : nil))) .  

op canonical_with_ : Conf Nat -> Conf .

eq canonical C with Max = toConf(truncate(mergesort(toList(C)), Max, 0)) .

*** red (canonical (time @ 10) (time @ 5) (time @ 12) (time @ 2) with 3) .

**** Rule to simplify plans by removing goal configurations.
var T : Nat .

crl[simplify]:
 {S}
=> 
noPlan
if goal({S}) == true .

**** Parameter for Max

*** Simple test whether Maude does tabling.
*** nVisits is the number of visits during the test
*** intT is the number of days between visits
*** tolT is the tolerance time for visits
*** dh is the duration one needs to wait when a subject is in hold.
*** max is the bound on the difference of timestamps.

vars nVisits intT tolT max dh : Nat . 
op pVis : Nat Nat Nat Nat Nat -> Fact .

*** op max : -> Nat .
*** eq max = 0 .

**** TIME RULE ****
 crl[time]:
{S (time @ T) (pVis(nVisits, intT, tolT, dh, max) @ 0) }
=>  
{canonical S (time @ (T + 1)) (pVis(nVisits, intT, tolT, dh, max) @ 0)  with max } 
if not (criticalC (canonical S (time @ (T + 1) ) (pVis(nVisits, intT, tolT, dh, max) @ 0) with max ) == true ) .

endm

mod FDA-VISIT is
  inc FDA-BASIC .

vars N T T1 T2 T3 T4 T5 I : Nat .
var S : Conf .
var ID : Id .
var Nm : Name .
var Lbl : Label .
vars nVisits intT tolT max dh : Nat .


**** INITIAL CONFIGURATION ****

*** This action models the start of a clinical investigation. One is supposed to 
*** provide the Id, Name, as well as the label of the Box belonging to this 
*** subject. The rule below is just simulating this action.
*** Here we are also assuming that the baseline visit was done at time 0. 

rl[initial]:
(pVis(nVisits, intT, tolT, dh, max) @ 0) start 
=> 
(pVis(nVisits, intT, tolT, dh, max) @ 0) (time @ 0) (status(id(0), ok) @ 0)
(sub(id(0), name(0)) @ 0)  (box(id(0), lb(0)) @ 0) (visit(1, id(0), no) @ 0) (trC @ 0) .

**** NORMAL VISIT RULES ****

*** Start of a normal visit. It should happen with a tolerance of tolT from 
*** the schedule time. The schedule time is specified by the timestamp of the 
*** fact visit. Also the tests should only be carried out if the status of the subject
*** is ok.
crl[visit]:
{(pVis(nVisits, intT, tolT, dh, max) @ 0)
   S (time @ T ) (visit(I, ID, no) @ T1)  (status(ID, ok) @ T2) }
=>
{(pVis(nVisits, intT, tolT, dh, max) @ 0)
   S (time @ T ) (visit(I, ID, yes) @ T)  (status(ID, ok) @ T2) (urine(I, ID, none, none) @ T ) (vital(I, ID, false) @ T) (blood(I, ID, false) @ T)}
if T <= T1 + tolT /\ T >= monus(T1, tolT) /\ I <= nVisits /\
not (criticalC ((pVis(nVisits, intT, tolT, dh, max) @ 0) S (time @ T ) (visit(I, ID, yes) @ T)  (status(ID, ok) @ T2) 
	(urine(I, ID, none, none) @ T ) (vital(I, ID, false) @ T) (blood(I, ID, false) @ T) ) == true ) .

**** Urine tests can have three different outcomes.
crl[urine]:
{S (time @ T ) (urine(I, ID, none, none)  @ T)}
=> 
{(S (time @ T ) (urine(I, ID, ok, none)  @ T))} +
{(S (time @ T ) (urine(I, ID, high, none)  @ T))} +
{(S (time @ T ) (urine(I, ID, bad, none)  @ T))}
if not (criticalC ((S (time @ T ) (urine(I, ID, ok, none)  @ T))) == true ) /\
not (criticalC ((S (time @ T ) (urine(I, ID, high, none)  @ T))) == true ) /\
not (criticalC ((S (time @ T ) (urine(I, ID, bad, none)  @ T))) == true ) .

*** A urine test should be repeated when the result of the first test
*** was bad. 
crl[repeatUrine]:
{S (time @ T ) (urine(I, ID, bad, none)  @ T1)}
=> 
{S (time @ T ) (urine(I, ID, bad, ok)  @ T)} +
{S (time @ T ) (urine(I, ID, bad, high)  @ T) (nefro(I, ID, false) @ T)} +
{S (time @ T ) (urine(I, ID, bad, bad)  @ T) (nefro(I, ID, false) @ T)}
if T <= T1 + 2 /\
not (criticalC ((S (time @ T ) (urine(I, ID, bad, ok)  @ T))) == true ) /\
not (criticalC ((S (time @ T ) (urine(I, ID, bad, high)  @ T) (nefro(I, ID, false) @ T))) == true ) /\
not (criticalC ((S (time @ T ) (urine(I, ID, bad, bad)  @ T) (nefro(I, ID, false) @ T))) == true ) .

*** If the result of the second urine test is high or bad, then a nephrology test 
*** should be carried out.
crl[nefro]:
{S (time @ T ) (nefro(I, ID, false) @ T)} 
=>
{S (time @ T ) (nefro(I, ID, true) @ T) }
if not (criticalC (S (time @ T ) (nefro(I, ID, true) @ T) ) == true) .

*** Vital tests are carried out without any special condition.
crl[vital]:
{S (time @ T ) (vital(I, ID, false) @ T)}
=> 
{S (time @ T ) (vital(I, ID, true) @ T) }
if not (criticalC (S (time @ T ) (vital(I, ID, true) @ T) ) == true) .

*** Blood chemistry tests are carried out without any special condition.
crl[blood]:
{S (time @ T ) (blood(I, ID, false) @ T)}
=> 
{S (time @ T ) (blood(I, ID, true) @ T) }
if not (criticalC (S (time @ T ) (blood(I, ID, true) @ T) ) == true) .



op okHigh : UrineResult -> Bool .
eq okHigh(ok) = true .
eq okHigh(high) = true .
eq okHigh(bad) = false .

op highBad : UrineResult -> Bool .
eq highBad(ok) = false .
eq highBad(high) = true .
eq highBad(bad) = true .

var URes : UrineResult .

*** A visit can end if everything went ok and a schedule is made for the next visit.
crl[testEnd1]:
{S (time @ T ) (vital(I, ID, true) @ T1) (urine(I, ID, URes, none)  @ T2) (blood(I, ID, true) @ T3)}
=> 
{S (time @ T )  (dose(I, ID, none)  @ T)}
if okHigh(URes) /\
not (criticalC (S (time @ T )  (dose(I, ID, none)  @ T)  ) == true ) .

*** A visit can also end if the result of the second urine test was ok.
crl[testEnd2]:
{S (time @ T ) (vital(I, ID, true) @ T1) (urine(I, ID, bad, ok)  @ T2) (blood(I, ID, true) @ T3)}
=> 
{S (time @ T ) (dose(I, ID, none)  @ T)}
if not (criticalC ((time @ T ) (dose(I, ID, none)  @ T) ) == true ) .

*** A visit can also end once the nephrology test has been carried when the 
*** second urine test was high or bad. 
crl[testEnd3]:
{S (time @ T ) (vital(I, ID, true) @ T1) (urine(I, ID, bad, URes)  @ T2)  (nefro(I, ID, true) @ T3) (blood(I, ID, true) @ T3)}
=> 
{S (time @ T ) (dose(I, ID, none)  @ T)}
if highBad(URes) /\
not (criticalC (S (time @ T )  (dose(I, ID, none)  @ T) ) == true ) .

*** After all tests have been performed, one has to provide a subject with his doses. 
crl[provideDoses]:
{S (time @ T ) (dose(I, ID, none) @ T) (box(ID, Lbl) @ T1)}
=> 
{S (time @ T ) (box(ID, Lbl) @ T1) (schedule(ID) @ T)}
if not (criticalC ( S (time @ T ) (box(ID, Lbl) @ T1) (schedule(ID) @ T)) == true ) .

*** Finally, one has to book the next visit.
*** Here we are assuming that the baseline visit was done at time 0.
*** This assumption can be easily withdrawn by including in the parameters the time 
*** of the baseline visit, as done in the technical report by including the fact visit(0, ID, done).

crl[endVisit]:
{(pVis(nVisits, intT, tolT, dh, max) @ 0)
   S (time @ T ) (schedule(ID) @ T) ( visit(I, ID, yes) @ T1)}
=> 
{(pVis(nVisits, intT, tolT, dh, max) @ 0)
   S (time @ T ) (visit((I + 1), ID, no) @ ( I * intT ))}
if not (criticalC ((pVis(nVisits, intT, tolT, dh, max) @ 0) S (time @ T ) (visit((I + 1), ID, no) @ ( I * intT ))) == true ) .

**** FDA RULES ****

var Num : TransNum .

**** CRITICAL CONFIGURATIONS **** 
*** The more critical configurations we specify, the better it is for proof search.

*** These critical states specify the critical configurations when the fda is not notified or 
*** a safety report is send in time.
ceq criticalC (S (time @ T) (detected(ID, Num) @ T1 )(fda(ID, no, Num) @ T2)) = true if T > T1 + 7 .

ceq criticalC (S (time @ T) (detected(ID, Num) @ T1 )(fda(ID, notify, Num) @ T2)) = true if T > T1 + 15 .

*** Time should not pass without no one showing up. 
*** One could add a new rule to exclude subjects that 
*** had no problems and did not appear.
ceq criticalC (S (time @ T) (visit (I, ID, no) @ T1)  (pVis(nVisits, intT, tolT, dh, max) @ 0)) = true 
if T > T1 + tolT /\ I <= nVisits .

*** All *basic* tests should be performed at the same day of the visits.
ceq criticalC (S (time @ T) (urine(I, ID, none, none) @ T1 ) (pVis(nVisits, intT, tolT, dh, max) @ 0 )) = true 
if T > T1 .

ceq criticalC (S (time @ T)  (vital(I, ID, false) @ T1) (pVis(nVisits, intT, tolT, dh, max) @ 0 )) = true 
if T > T1 .

ceq criticalC (S (time @ T)  (blood(I, ID, false) @ T1) (pVis(nVisits, intT, tolT, dh, max) @ 0 )) = true 
if T > T1 .

ceq criticalC (S (time @ T)   (dose(I, ID, none) @ T1) (pVis(nVisits, intT, tolT, dh, max) @ 0)) = true 
if T > T1 .

ceq criticalC (S (time @ T)   (nefro(I, ID, false) @ T1) (pVis(nVisits, intT, tolT, dh, max) @ 0)) = true 
if T > T1 .

*** Do not allow time to advance if a second urine test is not performed:
ceq criticalC (S (time @ T) (urine(I, ID, bad, none) @ T1 ) (pVis(nVisits, intT, tolT, dh, max) @ 0)) = true 
if T > T1 + 5 .

*** We also cosntraint time not to advance to outside the clinical investigation period.
ceq criticalC (S (time @ T) (visit (I, ID, no) @ T1) (pVis(nVisits, intT, tolT, dh, max) @ 0)) = true 
if monus(T, T1) > max .

*** Time should also not pass after the time for finishing a visit.
ceq criticalC (S (time @ T) (visit (I, ID, yes) @ T1) (pVis(nVisits, intT, tolT, dh, max) @ 0)) = true 
if monus(T, T1) > max .

*** Time should also not pass after the time for finishing a visit.
ceq criticalC (S (time @ T) (visit (I, ID, yes) @ T1) (pVis(nVisits, intT, tolT, dh, max) @ 0)) = true 
if monus(T, T1) > 0 .


*** One should perform test at the same day as the visit.
*** These could be relaxed if necessary.
ceq criticalC (S (time @ T) (urine(I, ID, none, none) @ T1)) = true 
if T > T1 .

ceq criticalC (S (time @ T) (vital(I, ID, false) @ T1)) = true 
if T > T1 .

**** GOAL CONFIGURATIONS ****

*** There are two goal configurations. The first is when all visits have 
*** been performed. The second is when a subject has been excluded
*** from the test and the safety report has been sent.
ceq goalC (S (pVis(nVisits, intT, tolT, dh, max) @ 0) (visit (I, ID, no) @ T1) ) = true
if I = nVisits + 1 .

eq goalC (S (pVis(nVisits, intT, tolT, dh, max) @ 0) (status(ID, stop) @ T) 
                (detected(ID, Num) @ T )(fda(ID, safety, Num) @ T2) ) = true .

endm

***( Commenting all tests, so that one can use the Evaluate Buffer Option

set show timing on .

rew [3000] {(pVis(1,0,3,0,4) @ 0)  start} .
***( Found one solution 
rewrite: 473 in 0ms cpu (1ms real) (~ rewrites/second)
result Plan: noPlan
)

rew [100] {(pVis(1,0,0,0,0) @ 0)  start} .

search in FDA-VISIT : {(pVis(1,0,0,0,0) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .

rew [100] {(pVis(1,0,1,0,0) @ 0)  start} .

search in FDA-VISIT : {(pVis(1,0,1,0,0) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .


rew [100] {(pVis(1,0,0,0,1) @ 0)  start} .

search in FDA-VISIT : {(pVis(1,0,0,0,1) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .

rew [100] {(pVis(1,0,1,0,1) @ 0)  start} .

search in FDA-VISIT : {(pVis(1,0,1,0,1) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .


rew [100] {(pVis(1,0,0,0,2) @ 0)  start} .

search in FDA-VISIT : {(pVis(1,0,0,0,2) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .

rew [100] {(pVis(1,0,0,0,3) @ 0)  start} .

search in FDA-VISIT : {(pVis(1,0,0,0,3) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .

rew [100] {(pVis(1,0,0,0,4 @ 0)  start} .

search in FDA-VISIT : {(pVis(1,0,0,0,4) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .

search in FDA-VISIT : {(pVis(1,0,0,0,5) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .

search in FDA-VISIT : {(pVis(1,0,0,0,6) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .

search in FDA-VISIT : {(pVis(1,0,0,0,7) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .

search in FDA-VISIT : {(pVis(1,0,0,0,8) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .

search in FDA-VISIT : {(pVis(1,0,0,0,9) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .

search in FDA-VISIT : {(pVis(1,0,0,0,10) @ 0)  start} =>+ P:Plan such that
   goal(P:Plan) = true .



) *** END OF TESTS
