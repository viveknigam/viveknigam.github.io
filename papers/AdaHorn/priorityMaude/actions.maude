fmod AUTOMATA is 

 var id : Id .
 var st : State .
 sorts Action State Id .
 sort StateAction .
 op <_,_> : State Action -> StateAction .
 op tr : Id State -> StateAction .
 

 sorts Automaton Automata .
 subsort Automaton < Automata .
 op <_,_> : Id State -> Automaton .
 op getState : Automaton -> State .
 eq getState(< id, st > ) = st .

 op none : -> Automata .
 op __ : Automata Automata -> Automata [ctor assoc comm id: none] .

 sorts TrEle Trace .
 subsort TrEle < Trace .
 op [_,_] : Action Automata -> TrEle .
 op nil : -> Trace .
 op _;_ : Trace Trace -> Trace [ctor assoc id: nil] .

 sort Conf .
 op [_,_] : Automata Trace -> Conf .

endfm 

mod EXE is
  inc AUTOMATA .

vars st1 st2 : State .
var act : Action .
var auts : Automata .
vars id : Id .
vars tr tr1 tr2 : Trace .
var ats : Automata .

op seen : Automata Trace -> Bool .
eq seen(ats, tr1 ; [act, ats] ; tr2) = true .
eq seen(ats,tr) = false [owise] .

crl[trans]:
 [< id,st1 > auts, tr]
 =>
 [< id,st2 > auts, tr ; [act, < id,st2 > auts] ]
 if < st2, act > := tr(id,st1) 
 /\ not seen(< id,st2 > auts, tr) .

 --- crl[trans]:
 --- < id,st1 > 
 --- =>
 --- < id,st2 > 
 --- if < st2, act > := tr(id,st1) [print id " " st1 " " act " " st2] .

endm

mod EXAMPLE is
  inc EXE .

 vars at1 at2 : Automaton .
 var ats : Automata .
 var tr : Trace .

 ops id1 id2 : -> Id .
 ops a b c d dum : -> Action .
 ops st0 st1 : -> State .

 eq tr(id1,st0) = < st1, a > .
 eq tr(id1,st1) = < st0, b > .
 eq tr(id2,st0) = < st1, c > .
 eq tr(id2,st1) = < st0, d > .

 op initialState : -> Automata .
 eq initialState = < id1, st0 > < id2, st0 > .

 op initialConf : -> Conf .
 eq initialConf = [ initialState , [dum
 , initialState] ] .

 op badState : Automata -> Bool .
 ceq badState(at1 at2 ats) = true 
  if getState(at1) == st1
  /\ getState(at2) == st1 .
 eq badState(ats) = false [owise] .

endm
***(
search initialState =>* ats such that badState(ats) .

search initialConf =>* [ats, tr]  such that badState(ats) .

srewrite initialStat with trans .

cBook-Pro-4:priorityMaude vivek$ maude actions.maude
         \||||||||||||||||||/
       --- Welcome to Maude ---
         /||||||||||||||||||\
     Maude alpha111 built: Dec 20 2016 16:46:01
      Copyright 1997-2016 SRI International
       Thu Jun 28 13:36:34 2018
Maude> search initialConf =>* [ats, tr]  such that badState(ats) .
search in EXAMPLE : initialConf =>* [ats,tr] such that badState(ats) = true .

Solution 1 (state 3)
states: 4  rewrites: 45 in 0ms cpu (0ms real) (79787 rewrites/second)
ats --> < id1,st1 > < id2,st1 >
tr --> [dum,< id1,st0 > < id2,st0 >] ; [a,< id1,st1 > < id2,st0 >] ; [c,< id1,st1 > < id2,st1 >]

Solution 2 (state 4)
states: 5  rewrites: 55 in 0ms cpu (1ms real) (73431 rewrites/second)
ats --> < id1,st1 > < id2,st1 >
tr --> [dum,< id1,st0 > < id2,st0 >] ; [c,< id1,st0 > < id2,st1 >] ; [a,< id1,st1 > < id2,st1 >]

No more solutions.
states: 7  rewrites: 107 in 0ms cpu (1ms real) (113227 rewrites/second)
Maude> search < id1,st1 > < id2,st1 > =>1 ats .
search in EXAMPLE : < id1,st1 > < id2,st1 > =>1 ats .

No solution.
states: 1  rewrites: 0 in 0ms cpu (0ms real) (0 rewrites/second)
Maude> search [< id1,st1 > < id2,st1 >, tr] =>1 ats .
Warning: <standard input>, line 3: didn't expect token ats:
[ < id1 , st1 > < id2 , st1 > , tr ] =>1 ats <---*HERE*
Warning: <standard input>, line 3: no parse for command.
Maude> search [< id1,st1 > < id2,st1 >, tr] =>1 conf:Conf .
search in EXAMPLE : [< id1,st1 > < id2,st1 >,tr] =>1 conf:Conf .

Solution 1 (state 1)
states: 2  rewrites: 5 in 0ms cpu (0ms real) (83333 rewrites/second)
conf:Conf --> [< id1,st0 > < id2,st1 >,tr ; [b,< id1,st0 > < id2,st1 >]]

Solution 2 (state 2)
states: 3  rewrites: 10 in 0ms cpu (0ms real) (47169 rewrites/second)
conf:Conf --> [< id1,st1 > < id2,st0 >,tr ; [d,< id1,st1 > < id2,st0 >]]

No more solutions.
states: 3  rewrites: 10 in 0ms cpu (0ms real) (33333 rewrites/second)
Maude> search initialConf =>* [ats, tr]  such that badState(ats) .
search in EXAMPLE : initialConf =>* [ats,tr] such that badState(ats) = true .

Solution 1 (state 3)
states: 4  rewrites: 45 in 0ms cpu (0ms real) (194805 rewrites/second)
ats --> < id1,st1 > < id2,st1 >
tr --> [dum,< id1,st0 > < id2,st0 >] ; [a,< id1,st1 > < id2,st0 >] ; [c,< id1,st1 > < id2,st1 >]

Solution 2 (state 4)
states: 5  rewrites: 55 in 0ms cpu (0ms real) (131578 rewrites/second)
ats --> < id1,st1 > < id2,st1 >
tr --> [dum,< id1,st0 > < id2,st0 >] ; [c,< id1,st0 > < id2,st1 >] ; [a,< id1,st1 > < id2,st1 >]

No more solutions.
states: 7  rewrites: 107 in 0ms cpu (0ms real) (162121 rewrites/second)
Maude> search initialConf =>* [ats, tr]  such that badState(ats) .
search in EXAMPLE : initialConf =>* [ats,tr] such that badState(ats) = true .

Solution 1 (state 3)
states: 4  rewrites: 45 in 0ms cpu (0ms real) (205479 rewrites/second)
ats --> < id1,st1 > < id2,st1 >
tr --> [dum,< id1,st0 > < id2,st0 >] ; [a,< id1,st1 > < id2,st0 >] ; [c,< id1,st1 > < id2,st1 >]

Solution 2 (state 4)
states: 5  rewrites: 55 in 0ms cpu (0ms real) (133495 rewrites/second)
ats --> < id1,st1 > < id2,st1 >
tr --> [dum,< id1,st0 > < id2,st0 >] ; [c,< id1,st0 > < id2,st1 >] ; [a,< id1,st1 > < id2,st1 >]

No more solutions.
states: 7  rewrites: 107 in 0ms cpu (0ms real) (143817 rewrites/second)
Maude> search [< id1,st1 > < id2,st0 >,tr] =>1 Conf:Conf .
search in EXAMPLE : [< id1,st1 > < id2,st0 >,tr] =>1 Conf:Conf .

Solution 1 (state 1)
states: 2  rewrites: 5 in 0ms cpu (0ms real) (64935 rewrites/second)
Conf:Conf --> [< id1,st0 > < id2,st0 >,tr ; [b,< id1,st0 > < id2,st0 >]]

Solution 2 (state 2)
states: 3  rewrites: 10 in 0ms cpu (0ms real) (52083 rewrites/second)
Conf:Conf --> [< id1,st1 > < id2,st1 >,tr ; [c,< id1,st1 > < id2,st1 >]]

No more solutions.
states: 3  rewrites: 10 in 0ms cpu (0ms real) (35087 rewrites/second)

)



